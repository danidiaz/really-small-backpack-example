{-# LANGUAGE KindSignatures #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE FlexibleInstances #-}
signature LogicIndef.Monad where

import Control.Monad.Reader (MonadReader)
import Control.Monad.State.Strict (MonadState)
import Data.Kind (Type)

data M :: Type -> Type
instance Functor M
instance Applicative M
instance Monad M
instance MonadReader Int M
instance MonadState Int M

